#!/usr/bin/env python3
"""
Final Comprehensive Test - All Issues Fixed
"""

from final_mvp_system import FinalMVPChatbot
import logging

logging.basicConfig(level=logging.INFO)

def run_final_tests():
    """Run comprehensive tests for all fixed issues"""
    print("üöÄ Final Comprehensive Test Suite")
    print("=" * 60)
    
    chatbot = FinalMVPChatbot()
    
    # Critical test cases that were problematic
    critical_tests = [
        {
            "category": "üîç Product Search Accuracy",
            "tests": [
                ("afrika gecelik", "Should find Afrika Etnik product first"),
                ("afirka gecelik", "Should handle typo and find Afrika product"),
                ("hamile lohusa takƒ±m", "Should find maternity products"),
                ("dantelli gecelik", "Should find lace nightgowns"),
                ("g√∂ƒü√ºs dekolteli", "Should find decollete products")
            ]
        },
        {
            "category": "üí∞ Context-Aware Queries", 
            "tests": [
                ("afrika gecelik fiyatƒ± nedir", "Should show Afrika product price directly"),
                ("hamile takƒ±m ne kadar", "Should show maternity set price"),
                ("dantelli gecelik stok var mƒ±", "Should check lace nightgown stock")
            ]
        },
        {
            "category": "üëã Conversation Flow",
            "tests": [
                ("merhaba", "Should greet properly"),
                ("yok", "Should say goodbye"),
                ("hayƒ±r", "Should say goodbye"),
                ("ba≈üka sorum yok", "Should say goodbye"),
                ("te≈üekk√ºrler", "Should acknowledge thanks"),
                ("g√∂r√º≈ü√ºr√ºz", "Should say goodbye")
            ]
        },
        {
            "category": "üè¢ Business Information",
            "tests": [
                ("telefon numaranƒ±z", "Should provide phone number"),
                ("iade politikasƒ±", "Should provide return policy"),
                ("kargo bilgileri", "Should provide shipping info")
            ]
        }
    ]
    
    total_tests = 0
    successful_tests = 0
    
    for category_info in critical_tests:
        category = category_info["category"]
        tests = category_info["tests"]
        
        print(f"\n{category}")
        print("-" * 50)
        
        for query, expected in tests:
            total_tests += 1
            print(f"\nüë§ User: {query}")
            print(f"üìù Expected: {expected}")
            
            try:
                response = chatbot.chat(query)
                print(f"ü§ñ Bot: {response.message[:100]}{'...' if len(response.message) > 100 else ''}")
                print(f"üìä Intent: {response.intent} (confidence: {response.confidence:.2f})")
                
                if response.products_found > 0:
                    print(f"üõçÔ∏è Products found: {response.products_found}")
                
                # Simple success criteria
                success = True
                if "afrika" in query.lower() and response.products_found > 0:
                    # Check if Afrika product is mentioned in response
                    if "Afrika Etnik" not in response.message:
                        success = False
                        print("‚ùå Afrika product not found first")
                elif "yok" in query or "hayƒ±r" in query or "ba≈üka sorum yok" in query:
                    if response.intent != "goodbye":
                        success = False
                        print("‚ùå Should be goodbye intent")
                elif "fiyat" in query and response.intent == "price_inquiry":
                    if response.products_found == 0:
                        success = False
                        print("‚ùå Should find product and show price")
                
                if success:
                    successful_tests += 1
                    print("‚úÖ Test passed")
                else:
                    print("‚ùå Test failed")
                    
            except Exception as e:
                print(f"‚ùå Error: {e}")
    
    # Final report
    print(f"\n{'='*60}")
    print(f"üìä FINAL TEST REPORT")
    print(f"{'='*60}")
    print(f"Total Tests: {total_tests}")
    print(f"Successful: {successful_tests}")
    print(f"Failed: {total_tests - successful_tests}")
    print(f"Success Rate: {(successful_tests/total_tests)*100:.1f}%")
    
    if successful_tests / total_tests >= 0.95:
        print("üéâ EXCELLENT! System is production ready!")
    elif successful_tests / total_tests >= 0.90:
        print("‚úÖ GOOD! System is ready with minor improvements needed")
    else:
        print("‚ö†Ô∏è NEEDS WORK! More improvements required")
    
    return successful_tests / total_tests

if __name__ == "__main__":
    success_rate = run_final_tests()
    print(f"\nFinal Success Rate: {success_rate*100:.1f}%")