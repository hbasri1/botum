#!/usr/bin/env python3
"""
MVP Quick Fixes - HÄ±zlÄ± ve etkili Ã§Ã¶zÃ¼mler
"""

import asyncio
import json
from typing import Dict, List, Any, Optional

class MVPQuickFixes:
    """MVP iÃ§in hÄ±zlÄ± Ã§Ã¶zÃ¼mler"""
    
    def __init__(self):
        self.conversation_context = {}  # session_id -> context
        self.enhanced_keywords = self._load_enhanced_keywords()
    
    def _load_enhanced_keywords(self) -> Dict[str, List[str]]:
        """GeliÅŸmiÅŸ keyword mapping"""
        return {
            # Dekolte terimleri
            "dekolte": ["dekolteli", "dekolte", "aÃ§Ä±k", "gÃ¶ÄŸÃ¼s", "sÄ±rt"],
            "gÃ¶ÄŸÃ¼s_dekolte": ["gÃ¶ÄŸÃ¼s dekolteli", "gÃ¶ÄŸÃ¼s aÃ§Ä±k", "v yaka"],
            "sÄ±rt_dekolte": ["sÄ±rt dekolteli", "sÄ±rt aÃ§Ä±k", "aÃ§Ä±k sÄ±rt"],
            
            # TakÄ±m terimleri
            "takÄ±m": ["takÄ±m", "takÄ±mÄ±", "set", "komple", "alt Ã¼st"],
            "ÅŸort_takÄ±m": ["ÅŸort takÄ±m", "ÅŸort takÄ±mÄ±", "kÄ±sa takÄ±m"],
            
            # Stil terimleri
            "brode": ["brode", "brodeli", "iÅŸlemeli", "nakÄ±ÅŸlÄ±"],
            "dantelli": ["dantelli", "dantel", "gÃ¼pÃ¼rlÃ¼"],
            
            # Renk terimleri
            "afrika": ["afrika", "etnik", "desenli", "tribal"],
        }
    
    def enhance_search_query(self, query: str) -> str:
        """Query'yi geliÅŸtirilmiÅŸ keywords ile zenginleÅŸtir"""
        enhanced_query = query.lower()
        
        # Keyword expansion
        for main_term, synonyms in self.enhanced_keywords.items():
            for synonym in synonyms:
                if synonym in enhanced_query:
                    # Ana terimi de ekle
                    if main_term not in enhanced_query:
                        enhanced_query += f" {main_term}"
        
        return enhanced_query
    
    def store_conversation_context(self, session_id: str, product_name: str, query_type: str):
        """Basit conversation context storage"""
        self.conversation_context[session_id] = {
            "last_product": product_name,
            "last_query_type": query_type,
            "timestamp": asyncio.get_event_loop().time()
        }
    
    def get_conversation_context(self, session_id: str) -> Optional[Dict[str, Any]]:
        """Conversation context'i al"""
        context = self.conversation_context.get(session_id)
        if context:
            # 5 dakika timeout
            if asyncio.get_event_loop().time() - context["timestamp"] < 300:
                return context
            else:
                # Timeout olmuÅŸ, temizle
                del self.conversation_context[session_id]
        return None
    
    def resolve_contextual_query(self, query: str, session_id: str) -> Optional[str]:
        """Contextual query'leri Ã§Ã¶z"""
        query_lower = query.lower().strip()
        
        # Fiyat sorularÄ±
        if any(word in query_lower for word in ["fiyat", "kaÃ§ para", "ne kadar", "price"]):
            context = self.get_conversation_context(session_id)
            if context and context.get("last_product"):
                return context["last_product"]
        
        # Stok sorularÄ±
        if any(word in query_lower for word in ["stok", "var mÄ±", "mevcut"]):
            context = self.get_conversation_context(session_id)
            if context and context.get("last_product"):
                return context["last_product"]
        
        return None
    
    def calculate_enhanced_similarity(self, query: str, product_name: str) -> float:
        """GeliÅŸmiÅŸ similarity hesaplama"""
        from rapidfuzz import fuzz
        
        # Temel similarity
        base_score = fuzz.token_set_ratio(query.lower(), product_name.lower())
        
        # Keyword bonuslarÄ±
        bonus = 0
        query_words = query.lower().split()
        product_words = product_name.lower().split()
        
        # Exact keyword matches
        for word in query_words:
            if word in product_words:
                bonus += 10
        
        # Ã–zel keyword bonuslarÄ±
        if "dekolte" in query.lower():
            if "dekolteli" in product_name.lower():
                bonus += 20
        
        if "gÃ¶ÄŸÃ¼s" in query.lower() and "sÄ±rt" in query.lower():
            if "gÃ¶ÄŸÃ¼s" in product_name.lower() and "sÄ±rt" in product_name.lower():
                bonus += 30
        
        if "ÅŸort" in query.lower():
            if "ÅŸort" in product_name.lower():
                bonus += 25
        
        if "takÄ±m" in query.lower():
            if "takÄ±m" in product_name.lower():
                bonus += 15
        
        return min(100, base_score + bonus)

# Test fonksiyonu
async def test_mvp_fixes():
    """MVP fixes'i test et"""
    
    print("ðŸš€ MVP Quick Fixes Test")
    print("=" * 30)
    
    mvp = MVPQuickFixes()
    
    # Test 1: Enhanced search query
    test_query = "gÃ¶ÄŸÃ¼s ve sÄ±rt dekolteli takÄ±m"
    enhanced = mvp.enhance_search_query(test_query)
    print(f"Original: {test_query}")
    print(f"Enhanced: {enhanced}")
    
    # Test 2: Similarity calculation
    product_name = "GÃ¶ÄŸÃ¼s ve SÄ±rt Dekolteli Brode Dantelli Åžort TakÄ±mÄ±"
    similarity = mvp.calculate_enhanced_similarity(test_query, product_name)
    print(f"Similarity: {similarity}")
    
    # Test 3: Context management
    session_id = "test_session"
    mvp.store_conversation_context(session_id, "Afrika Gecelik", "stok")
    
    contextual_query = "fiyatÄ± nedir"
    resolved = mvp.resolve_contextual_query(contextual_query, session_id)
    print(f"Contextual query: {contextual_query}")
    print(f"Resolved to: {resolved}")

if __name__ == "__main__":
    asyncio.run(test_mvp_fixes())