"""
Simple Intent System - Basit ve etkili
"""

import logging
import asyncio
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class SimpleIntentSystem:
    """Basit ve etkili intent sistemi"""
    
    def __init__(self):
        # KESIN PATTERN'LER - bunlar iÃ§in LLM'e gerek yok
        self.exact_patterns = {
            # Selamlama
            "merhaba": {"intent": "greeting", "response": "Merhaba! Butik CemÃ¼nay'a hoÅŸ geldiniz. Size nasÄ±l yardÄ±mcÄ± olabilirim?"},
            "selam": {"intent": "greeting", "response": "Merhaba! Butik CemÃ¼nay'a hoÅŸ geldiniz. Size nasÄ±l yardÄ±mcÄ± olabilirim?"},
            "hello": {"intent": "greeting", "response": "Merhaba! Butik CemÃ¼nay'a hoÅŸ geldiniz. Size nasÄ±l yardÄ±mcÄ± olabilirim?"},
            "hi": {"intent": "greeting", "response": "Merhaba! Butik CemÃ¼nay'a hoÅŸ geldiniz. Size nasÄ±l yardÄ±mcÄ± olabilirim?"},
            
            # TeÅŸekkÃ¼r
            "teÅŸekkÃ¼rler": {"intent": "thanks", "response": "Rica ederim! BaÅŸka sorunuz var mÄ±?"},
            "teÅŸekkÃ¼r": {"intent": "thanks", "response": "Rica ederim! BaÅŸka sorunuz var mÄ±?"},
            "saÄŸol": {"intent": "thanks", "response": "Rica ederim! BaÅŸka sorunuz var mÄ±?"},
            "thanks": {"intent": "thanks", "response": "Rica ederim! BaÅŸka sorunuz var mÄ±?"},
            
            # VedalaÅŸma
            "hoÅŸÃ§a kal": {"intent": "farewell", "response": "HoÅŸÃ§a kalÄ±n! Tekrar bekleriz. ðŸ˜Š"},
            "gÃ¼le gÃ¼le": {"intent": "farewell", "response": "HoÅŸÃ§a kalÄ±n! Tekrar bekleriz. ðŸ˜Š"},
            "gÃ¶rÃ¼ÅŸÃ¼rÃ¼z": {"intent": "farewell", "response": "HoÅŸÃ§a kalÄ±n! Tekrar bekleriz. ðŸ˜Š"},
            "bye": {"intent": "farewell", "response": "HoÅŸÃ§a kalÄ±n! Tekrar bekleriz. ðŸ˜Š"},
            
            # Onay/Anlama
            "tamam": {"intent": "acknowledgment", "response": "BaÅŸka bir sorunuz var mÄ±?"},
            "ok": {"intent": "acknowledgment", "response": "BaÅŸka bir sorunuz var mÄ±?"},
            "peki": {"intent": "acknowledgment", "response": "BaÅŸka bir sorunuz var mÄ±?"},
            "anladÄ±m": {"intent": "acknowledgment", "response": "BaÅŸka bir sorunuz var mÄ±?"},
            "evet": {"intent": "acknowledgment", "response": "BaÅŸka bir sorunuz var mÄ±?"},
            
            # Red/Olumsuz
            "yok": {"intent": "negative", "response": "TeÅŸekkÃ¼r ederiz! Ä°yi gÃ¼nler dileriz. ðŸ˜Š"},
            "hayÄ±r": {"intent": "negative", "response": "BaÅŸka bir konuda yardÄ±mcÄ± olabilirim."},
            "istemiyorum": {"intent": "negative", "response": "BaÅŸka bir konuda yardÄ±mcÄ± olabilirim."},
        }
        
        # Ä°ÅžLETME BÄ°LGÄ° PATTERN'LERÄ°
        self.business_patterns = {
            "telefon": ["telefon", "phone", "iletiÅŸim", "numar", "ara"],
            "iade": ["iade", "return", "geri", "deÄŸiÅŸim", "deÄŸiÅŸtir"],
            "kargo": ["kargo", "teslimat", "shipping", "cargo"],
            "site": ["site", "web", "website"]
        }
        
        # ÃœRÃœN SORGU PATTERN'LERÄ°
        self.product_patterns = [
            "fiyat", "kaÃ§ para", "ne kadar", "price",
            "stok", "var mÄ±", "mevcut", "stock",
            "renk", "color", "beden", "size"
        ]
        
        # ÃœRÃœN ADI PATTERN'LERÄ°
        self.product_names = [
            "gecelik", "pijama", "elbise", "sabahlÄ±k", "takÄ±m",
            "hamile", "lohusa", "afrika", "dantelli", "siyah", "beyaz"
        ]
        
        # ANLAMSIZ PATTERN'LER - gerÃ§ekten anlamsÄ±z olanlar
        self.nonsense_patterns = [
            # Sadece gerÃ§ek nonsense - kÃ¼fÃ¼r ve spam
            "annen", "baban", "kardeÅŸin", "ablan", "aÄŸabeyin",
            "asdfgh", "qwerty", "123456", "test test", "deneme deneme",
            "amk", "amÄ±na", "sik", "gÃ¶tÃ¼", "orospu"
        ]
        
        # TÃœRKÃ‡E GELECEK ZAMAN EKLERÄ° - Ã–NEMLÄ°!
        self.future_tense_patterns = [
            "fiyat soracaktÄ±m", "fiyat soracaÄŸÄ±m", "fiyat Ã¶ÄŸreneceÄŸim",
            "fiyat sormak istiyorum", "fiyat bilmek istiyorum", 
            "fiyat Ã¶ÄŸrenmek istiyorum", "fiyat almak istiyorum",
            "stok soracaktÄ±m", "stok Ã¶ÄŸreneceÄŸim", "stok sormak istiyorum",
            "bilgi alacaktÄ±m", "bilgi almak istiyorum", "soru soracaktÄ±m"
        ]
    
    async def detect_intent(self, message: str) -> Dict[str, Any]:
        """Basit ve etkili intent detection"""
        
        if not message or not message.strip():
            return {
                "intent": "clarification_needed",
                "confidence": 0.9,
                "method": "empty_message",
                "response": "Merhaba! Size nasÄ±l yardÄ±mcÄ± olabilirim?"
            }
        
        message_clean = message.lower().strip()
        
        # 1. Ã–NCE TÃœRKÃ‡E GELECEK ZAMAN EKLERÄ°NE BAK - Ã–NEMLÄ°!
        for future_pattern in self.future_tense_patterns:
            if future_pattern in message_clean:
                # Fiyat sorusu mu?
                if "fiyat" in future_pattern:
                    return {
                        "intent": "product_inquiry",
                        "confidence": 0.9,
                        "method": "future_tense_price",
                        "use_intelligent_search": True,
                        "context_hint": "user_wants_price_info"
                    }
                # Stok sorusu mu?
                elif "stok" in future_pattern:
                    return {
                        "intent": "product_inquiry", 
                        "confidence": 0.9,
                        "method": "future_tense_stock",
                        "use_intelligent_search": True,
                        "context_hint": "user_wants_stock_info"
                    }
                # Genel bilgi sorusu
                else:
                    return {
                        "intent": "clarification_needed",
                        "confidence": 0.8,
                        "method": "future_tense_general",
                        "response": "Hangi Ã¼rÃ¼n hakkÄ±nda bilgi almak istiyorsunuz?"
                    }
        
        # 2. SONRA ANLAMSIZ PATTERN'LERE BAK - daha akÄ±llÄ±
        # Sadece mesaj tamamen nonsense ise algÄ±la
        nonsense_count = sum(1 for nonsense in self.nonsense_patterns if nonsense in message_clean)
        meaningful_count = sum(1 for pattern in self.product_patterns + self.product_names if pattern in message_clean)
        
        # EÄŸer nonsense Ã§ok fazla ve meaningful az ise nonsense
        if nonsense_count > 0 and meaningful_count == 0 and len(message_clean.split()) <= 3:
            return {
                "intent": "clarification_needed",
                "confidence": 0.9,
                "method": "nonsense_detection",
                "response": "AnlayamadÄ±m. ÃœrÃ¼n, fiyat, iade veya iletiÅŸim hakkÄ±nda sorabilirsiniz."
            }
        
        # 3. KESIN PATTERN'LERE BAK
        if message_clean in self.exact_patterns:
            pattern = self.exact_patterns[message_clean]
            return {
                "intent": pattern["intent"],
                "confidence": 0.95,
                "method": "exact_pattern",
                "response": pattern["response"]
            }
        
        # 4. Ä°ÅžLETME BÄ°LGÄ° PATTERN'LERÄ°NE BAK
        for info_type, patterns in self.business_patterns.items():
            if any(pattern in message_clean for pattern in patterns):
                # ÃœrÃ¼n adÄ± da varsa Ã¼rÃ¼n sorgusu olabilir
                has_product = any(product in message_clean for product in self.product_names)
                if not has_product:
                    return {
                        "intent": "business_info",
                        "confidence": 0.9,
                        "method": "business_pattern",
                        "info_type": info_type,
                        "function_call": {"name": "getGeneralInfo", "args": {"info_type": info_type}}
                    }
        
        # 5. ÃœRÃœN SORGUSU MU KONTROL ET - DAHA AKILLI
        has_product_query = any(pattern in message_clean for pattern in self.product_patterns)
        has_product_name = any(product in message_clean for product in self.product_names)
        
        # GELÄ°ÅžMÄ°Åž ÃœRÃœN ADI Ã‡IKARMA
        extracted_product = self._extract_enhanced_product_name(message_clean)
        if extracted_product:
            has_product_name = True
        
        # Sadece Ã¼rÃ¼n sorgu kelimesi varsa ve Ã¼rÃ¼n adÄ± yoksa belirsiz
        if has_product_query and not has_product_name:
            # Tek kelime ise clarification iste
            if len(message_clean.split()) <= 1:
                return {
                    "intent": "clarification_needed",
                    "confidence": 0.9,
                    "method": "incomplete_query",
                    "response": f"Hangi Ã¼rÃ¼n hakkÄ±nda bilgi almak istiyorsunuz?"
                }
        
        # Hem Ã¼rÃ¼n sorgusu hem Ã¼rÃ¼n adÄ± varsa Ã¼rÃ¼n sorgusu
        if has_product_query and has_product_name:
            return {
                "intent": "product_inquiry",
                "confidence": 0.8,
                "method": "product_pattern",
                "use_intelligent_search": True
            }
        
        # Sadece Ã¼rÃ¼n adÄ± varsa da Ã¼rÃ¼n sorgusu
        if has_product_name:
            return {
                "intent": "product_inquiry",
                "confidence": 0.7,
                "method": "product_name_only",
                "use_intelligent_search": True
            }
        
        # 6. KISA VE BELÄ°RSÄ°Z MESAJLAR - daha akÄ±llÄ±
        words = message_clean.split()
        if len(words) <= 2:
            # Tek kelime Ã¼rÃ¼n sorgularÄ± - belirsiz
            if len(words) == 1 and words[0] in ["fiyat", "stok", "renk", "beden"]:
                return {
                    "intent": "clarification_needed",
                    "confidence": 0.9,
                    "method": "incomplete_query",
                    "response": f"Hangi Ã¼rÃ¼nÃ¼n {words[0]} bilgisini Ã¶ÄŸrenmek istiyorsunuz?"
                }
            
            # DiÄŸer kÄ±sa mesajlar
            return {
                "intent": "clarification_needed",
                "confidence": 0.8,
                "method": "short_message",
                "response": "Tam olarak ne hakkÄ±nda bilgi almak istiyorsunuz? ÃœrÃ¼n, fiyat, iade veya iletiÅŸim konularÄ±nda yardÄ±mcÄ± olabilirim."
            }
        
        # 7. LLM'E GÃ–NDERÄ°LECEK - karmaÅŸÄ±k durumlar
        return {
            "intent": "needs_llm",
            "confidence": 0.6,
            "method": "needs_llm",
            "use_llm": True,
            "original_message": message
        }
    
    def _extract_enhanced_product_name(self, message: str) -> str:
        """GeliÅŸmiÅŸ Ã¼rÃ¼n adÄ± Ã§Ä±karma"""
        
        # Compound products - birleÅŸik Ã¼rÃ¼n adlarÄ±
        compound_products = {
            "afrika gecelik": ["afrika", "gecelik"],
            "africa gecelik": ["africa", "gecelik"], 
            "hamile gecelik": ["hamile", "gecelik"],
            "lohusa takÄ±m": ["lohusa", "takÄ±m"],
            "dantelli gecelik": ["dantelli", "gecelik"],
            "Ã§iÃ§ekli pijama": ["Ã§iÃ§ek", "pijama"],
            "desenli takÄ±m": ["desen", "takÄ±m"],
            "Ã§iÃ§ek desenli": ["Ã§iÃ§ek", "desen"],
            "yaprak desenli": ["yaprak", "desen"]
        }
        
        for product_name, keywords in compound_products.items():
            if all(keyword in message for keyword in keywords):
                return product_name
        
        # Descriptive features
        descriptive_features = ["Ã§iÃ§ek", "yaprak", "desenli", "dantelli", "dekolteli"]
        base_products = ["gecelik", "pijama", "takÄ±m", "elbise", "sabahlÄ±k"]
        
        # Feature + product combinations
        for feature in descriptive_features:
            if feature in message:
                for product in base_products:
                    if product in message:
                        return f"{feature} {product}"
        
        return ""
    
    def should_use_llm(self, message: str) -> bool:
        """Bu mesaj iÃ§in LLM kullanÄ±lmalÄ± mÄ±?"""
        result = asyncio.run(self.detect_intent(message))
        return result.get("use_llm", False)

# Global instance
simple_intent_system = SimpleIntentSystem()